
#!/bin/sh

# Start functions  

# Print out the menu
__show_menu(){
    NORMAL="\033[m"
    MENU="\033[36m" # Blue
    NUMBER="\033[33m" # Yellow
    FGRED="\033[41m"
    RED_TEXT="\033[31m"
    ENTER_LINE="\033[33m"
    echo -e "${MENU}*********************************************${NORMAL}"
    echo -e "${MENU}**${NUMBER} 1)${MENU} Connect to PL226 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 2)${MENU} Connect to DE4 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 3)${MENU} Connect to US1 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 4)${MENU} Connect to US2 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 5)${MENU} Connect to CA222 ${NORMAL}" 
    echo -e "${MENU}**${NUMBER} 6)${MENU} Connect to FR1 ${NORMAL}"
    echo -e "${MENU}*********************************************${NORMAL}"
    echo -e "${ENTER_LINE}Press ${RED_TEXT}any other key to exit. ${NORMAL}"
}

# Print usage help
__usage(){
    echo "usage: vpnbook [[[-s server ] [-i]] | [-h]]"
    echo "server can be {PL226, DE4, US1, US2, CA222, FR1}"
    echo "if no parameter is set, the interactive mode is started."
}

# Check if the necessary tools are installed
__is_installed(){
    if ! [ -x "$(command -v $1)" ]; then
      echo "Error: $1 is not installed." >&2
      exit 1
    fi
}

# Check user permissions
__is_user_allowed_to_vpn(){
    local group=$(id -G -n $USER | grep -o "vpnstarter")
    if [ "${group}" == "vpnstarter" ]; then
        echo "User is part of the vpnstarter group"
    else
        echo "User is not part of vpnstarter group. Please fix this and retry."
        exit 1
    fi
}

# Check system requirements
__check_requirements(){
    __is_installed sudo
    __is_installed curl
    __is_installed openvpn
    __is_user_allowed_to_vpn
}

# Function to connect to VPN server
__connect_to() {
    local server=$1
    local l_server=$(echo ${server} | tr '[:upper:]' '[:lower:]')
    
    if [ -f ${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn ]; then
        echo "Attempting to connect to ${server}..."
        sudo openvpn --config ${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn \
                     --auth-user-pass ${vpnbook_folder}/login.conf \
                     --pull --route-ipv6 2000::/3 \
                     --dhcp-option DNS6 2001:4860:4860::8888 > ./tmp/vpnbook.log 2>&1 &
        
        # Wait a few seconds to allow OpenVPN to attempt the connection
        sleep 5
        
        # Check for AUTH_FAILED in the log
        if grep -q "AUTH_FAILED" ./tmp/vpnbook.log; then
          echo "AUTH_FAILED detected. Please enter the password manually(from https://www.vpnbook.com/):"
            read -s new_pwd  # -s makes sure the password is not displayed
            
            # Update the login.conf with the new password
            echo "vpnbook" > ${vpnbook_folder}/login.conf
            echo ${new_pwd} >> ${vpnbook_folder}/login.conf
            
            echo "Retrying connection with the new password..."
            sudo openvpn --config ${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn \
                         --auth-user-pass ${vpnbook_folder}/login.conf \
                         --pull --route-ipv6 2000::/3 \
                         --dhcp-option DNS6 2001:4860:4860::8888 > ./tmp/vpnbook.log 2>&1 &
            
            sleep 5
            if grep -q "AUTH_FAILED" ./tmp/vpnbook.log; then
                echo "AUTH_FAILED again. Exiting..."
                return 1
            fi
        fi
        
        return 0
    else
        echo "${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn not found"
        return 1
    fi
}

# Wait for a few seconds
__wait_for_seconds(){
    local seconds="$1"
    echo "Waiting ${seconds} seconds before continuing..."
    sleep ${seconds}
}

# Check if the VPN tunnel interface is up
__check_if_up(){
    __wait_for_seconds 10
    
    # Check for any tun interface (tun0, tun1, etc.)
    local if_result=$(ifconfig | grep -o "tun[0-9]")
    if [ -n "${if_result}" ]; then
        echo "VPN interface ${if_result} is active"
        return 1
    else
        echo "No tun interface found. VPN tunnel may not have been established."
        return 0
    fi
}

# Main script logic
# Variable Declaration
default_dir=.
vpnbook_folder=${default_dir}/.vpnbook
vpnbook_base_url=https://www.vpnbook.com
timestamp=$(date +%s)

# Command-line argument handling
interactive=1
server=""
while [ "$1" != "" ]; do
    case $1 in
        -s | --server )         shift
                                server=$1
                                interactive=0
                                ;;
        -i | --interactive )    interactive=1
                                ;;
        -h | --help )           __usage
                                exit
                                ;;
        * )                     __usage
                                exit 1
    esac
    shift
done

# Check if any VPN tunnel is already up
__check_if_up
if [ $? -eq 1 ]; then
    echo "VPN Tunnel already established. Exiting."
    exit 0
fi

# Check system requirements
__check_requirements

# Retrieve password
sh ${default_dir}/password_extractor -o ./tmp/password-${timestamp}.json
pwd=$(cat ./tmp/password-${timestamp}.json 2>/dev/null)

# Handle cases where password isn't retrieved
if [ -z "$pwd" ]; then
    echo "Password not retrieved from server. Exiting."
    exit 1
else
    mkdir -p ${vpnbook_folder}
    echo "vpnbook" > ${vpnbook_folder}/login.conf
    echo "$pwd" >> ${vpnbook_folder}/login.conf
fi

# Handle interactive mode
if [ "$interactive" = "1" ]; then
    __show_menu
    read -r opt
    case $opt in
        1) var=pl134 ;;
        2) var=de20 ;;
        3) var=us1 ;;
        4) var=uk205 ;;
        5) var=ca149 ;;
        6) var=fr200 ;;
        *) echo "Exit"; exit ;;
    esac
else
    var=$server
fi

echo "Starting the VPN Tunnel"
sudo -v  # Login to sudo
__connect_to $var

# Check if the VPN tunnel was successfully established
__check_if_up
if [ $? -ne 1 ]; then
    echo "Error: Failed to establish the VPN tunnel."
    exit 1
fi

echo "Cleaning temporary files..."
rm ./tmp/password-${timestamp}.json

# End script
exit 0
