#!/bin/sh

# Start functions  
# Print out the menu
__show_menu(){
    NORMAL=`echo "\033[m"`
    MENU=`echo "\033[36m"` #Blue
    NUMBER=`echo "\033[33m"` #yellow
    FGRED=`echo "\033[41m"`
    RED_TEXT=`echo "\033[31m"`
    ENTER_LINE=`echo "\033[33m"`
    echo -e "${MENU}*********************************************${NORMAL}"
    echo -e "${MENU}**${NUMBER} 1)${MENU} Connect to PL134 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 2)${MENU} Connect to DE20 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 3)${MENU} Connect to UK205 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 4)${MENU} Connect to US1 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 5)${MENU} Connect to CA149 ${NORMAL}" 
    echo -e "${MENU}**${NUMBER} 6)${MENU} Connect to FR200 ${NORMAL}"
    echo -e "${MENU}*********************************************${NORMAL}"
    echo -e "${ENTER_LINE}Press ${RED_TEXT}any other key to exit. ${NORMAL}"
}

# Print out the help
__usage(){
    echo "usage: vpnbook [[[-s server ] [-i]] | [-h]]"
	echo "server can be {PL226, DE4, US1, US2, CA222, FR1}"
	echo "if no parameter is set the interactive mode is started."
}

__read_property(){
	input="$@"
	if [ ! -f ${config_file} ]; then
		echo "${config_file} does not exist... Aborting..."
		exit 1
	else
		temp=`cat $config_file | sed 's/\"//g' | grep -w $input | cut -d ":" -f2` 
		echo ${temp##*|}
	fi
}

__zip_downloader(){
	local base_name=vpnbook-openvpn
	local country=$1 	
	local ext=zip
	local u_country=$(echo $country | tr '[:upper:]' '[:lower:]')

	if [ ! -f ${vpnbook_folder}/${u_country}/${base_name}-${country}.${ext} ]; then
		echo "Downloading" ${base_name}-${country}.${ext}	    	
		curl ${vpnbook_base_url}/free-openvpn-account/${base_name}-${u_country}.${ext} -o ${vpnbook_folder}/${base_name}-${u_country}.${ext} 
		# Make the original variable uppercase					
		unzip ${vpnbook_folder}/${base_name}-${u_country}.${ext} -d ${vpnbook_folder}/${u_country}	
    mv ${vpnbook_folder}/${u_country}/vpnbook-openvpn-$u_country/* ${vpnbook_folder}/${u_country}

    mv ${vpnbook_folder}/${base_name}-${u_country}.${ext} ${vpnbook_folder}/${u_country}
	fi
}

__is_user_allowed_to_vpn(){
	local group=$(id -G -n $USER | grep -o "vpnstarter")
	if [ "${group}" == "vpnstarter" ]; then
		echo "The user is part of the vpnstarter Group"
	else
		echo "The user is not part of the vpnstarter Group. Please Fix the issue first and then retry."
		exit 1
	fi
}

__is_installed(){
	if ! [ -x "$(command -v $1)" ]; then
	  echo 'Error: $1 is not installed.' >&2
	  exit 1
	fi
}

__check_requirements(){
	# Check if sudo, curl and openvpn are installed
	__is_installed sudo
	__is_installed curl
	__is_installed openvpn
	__is_user_allowed_to_vpn
}


__connect_to() {
    local server=$1
    local l_server=$(echo "${server}" | tr '[:upper:]' '[:lower:]')
    
    if [ -f "${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn" ]; then
        echo "Trying to establish the VPN tunnel to ${server}..."
        echo "Looking for file: ${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn"
        
        # Ensure log folder exists
        mkdir -p ./tmp
        
        # Start OpenVPN in the background and direct output to a log file
        sudo openvpn --config "${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn" \
                     --auth-user-pass "${vpnbook_folder}/login.conf" \
                     --pull --route-ipv6 2000::/3 \
                     --dhcp-option DNS6 2001:4860:4860::8888 > ./tmp/vpnbook.log 2>&1 &

        # Capture the process ID of the OpenVPN process
        vpn_pid=$!

        # Wait for a few seconds to allow OpenVPN to attempt the connection
        sleep 10

        # Check if the process is still running and check the log for AUTH_FAILED
        if grep -q "AUTH_FAILED" ./tmp/vpnbook.log; then
            echo "AUTH_FAILED detected. Please enter the password manually(check https://www.vpnbook.com/freevpn):"
            read -s new_pwd  # -s makes sure the password is not displayed

            # Update the login.conf with the new password
            echo "vpnbook" > "${vpnbook_folder}/login.conf"
            echo "${new_pwd}" >> "${vpnbook_folder}/login.conf"

            # Kill the previous OpenVPN process
            sudo kill "$vpn_pid"

            # Retry the connection with the new password
            echo "Retrying connection with the new password..."
            sudo openvpn --config "${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn" \
                         --auth-user-pass "${vpnbook_folder}/login.conf" \
                         --pull --route-ipv6 2000::/3 \
                         --dhcp-option DNS6 2001:4860:4860::8888 > ./tmp/vpnbook.log 2>&1 &
            
            vpn_pid=$!  # Update the PID of the new process
            sleep 10    # Give time for the connection attempt
        fi

        # Check if OpenVPN is still running
        if ps -p "$vpn_pid" > /dev/null; then
            echo "VPN connection established successfully."
        else
            echo "VPN connection failed. Please check the log at ./tmp/vpnbook.log for more details."
        fi

    else
        echo "VPN configuration file not found: ${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn"
        return 1
    fi
}
__connect_to_first_available(){
    local server=$1
    local OPENVPN_EXIT_STATUS
    
    if [ "${server}" != "" ]; then
       
        echo "Trying to Establish the Vpn Tunnel to ${server}..."
        __connect_to ${server}
        OPENVPN_EXIT_STATUS=$?

        if [ ${OPENVPN_EXIT_STATUS} -eq 0 ]; then
            echo "Vpn Tunnel established to ${server}"

           
            __check_if_up ${vpnbook_if_name}
            if [ $? -eq 1 ]; then
                echo "VPN interface is active"
                return 0  # Success
            else
                echo "VPN interface ${vpnbook_if_name} is not active"
                return 1  # Failure, interface didn't come up
            fi
         
        else
            echo "Failed to establish Vpn Tunnel to ${server}"
        fi
    else
        echo "No server specified. Trying default servers..."
       
        for i in pl134 de20 us1 uk205 ca149 fr200; do
            echo "Connecting to ${i}..."
            __connect_to ${i}
            OPENVPN_EXIT_STATUS=$?

            if [ ${OPENVPN_EXIT_STATUS} -eq 0 ]; then
                echo "Vpn Tunnel established to ${i}"

                
                __check_if_up ${vpnbook_if_name}
                if [ $? -eq 1 ]; then
                    echo "VPN interface ${vpnbook_if_name} is active"
                    return 0  # Success
                else
                    echo "VPN interface ${vpnbook_if_name} is not active"
                    return 1  # Failure, interface didn't come up
                fi
            else
                echo "Failed to connect to ${i}. Trying the next one..."
            fi
        done
    fi
    return 1 
}
__wait_for_seconds(){
	local seconds="$@"
	echo "waiting ${seconds} seconds before continuing..."
	sleep ${seconds}
}

__check_if_up(){
    __wait_for_seconds 10
    
    # Check for any tun interface (tun0, tun1, etc.)
    local if_result=$(ifconfig | grep -o "tun[0-9]")
    if [ -n "${if_result}" ]; then
        echo "VPN interface ${if_result} is active"
        return 1
    else
        echo "No tun interface found. VPN tunnel may not have been established."
        return 0
    fi
}
# Variable Declaration
default_dir=.
config_file=${default_dir}/vpnbook.config
vpnbook_folder=${default_dir}/.vpnbook
vpnbook_base_url=https://www.vpnbook.com
vpnbook_url=${vpnbook_base_url}/freevpn
tesseract_service_url=https://api.ocr.space/parse/image
vpnbook_if_name=$(__read_property vpnbook_if_name)
interactive=1
timestamp=$(date +%s)
pwd=''
exit_code=0

# Start Script
while [ "$1" != "" ]; do
    case $1 in
        -s | --server )         shift
                                server=$1
                                interactive=0
                                ;;
        -i | --interactive )    interactive=1
                                ;;
        -h | --help )           __usage
                                exit
                                ;;
        * )                     __usage
                                exit 1
    esac
    shift
done


__check_if_up ${vpnbook_if_name}

if [ $? -eq 1  ]; then
	echo "Nothing to do here. Vpn Tunnel already established."
	exit 0
fi

__check_requirements

# Retrieve the Password URL from the official webpage
sh ${default_dir}/password_extractor -o ./tmp/password-${timestamp}.json

# If password file exists
if [ -f "./tmp/password-${timestamp}.json" ]
then
	echo "Reading Password from ./tmp/password-${timestamp}.json"
	pwd=$(cat ./tmp/password-${timestamp}.json)
else
	echo "File ./tmp/password-${timestamp}.json does not exist"
fi

if [ "${pwd}" == "" ] 
then
	echo "Password not retrieved from server..."
	echo "Exiting"
	exit 1
else
	mkdir -p ${vpnbook_folder} 	
	
	for i in pl134 de20 us1 uk205 ca149 fr200 
	do
		__zip_downloader ${i}
	done
	 	
	echo "Password retrieved from server: ${pwd}"

	if [ -f ${vpnbook_folder}/login.conf ]
	then
		rm ${vpnbook_folder}/login.conf
	fi


	echo "vpnbook" >> ${vpnbook_folder}/login.conf
	echo $pwd >> ${vpnbook_folder}/login.conf


	if [ ${interactive} = "1" ]; then
		__show_menu
		read opt
		
		case $opt in
		1) var=pl134;;
		2) var=de20;;
		3) var=us1;;
		4) var=uk205;;
		5) var=ca149;;
		6) var=fr200;;
		*) echo "Exit"; exit;;
		esac
	else
		var=${server}
	fi

__check_if_up ${vpnbook_if_name}
if [ $? -eq 1 ]; then
    echo "VPN Tunnel already established. Nothing to do."
    exit 0
fi
	echo "Starting the Vpn Tunnel"
	
	sudo -v
	
	# Start the connection and if whatever error occurs, then connect to the first available server
	__connect_to_first_available ${var}
	
	# Check if the given interface is up and running
	# __check_if_up ${vpnbook_if_name}
	

if [ $? -ne 0 ]; then
    echo "An Error has occurred while trying to Establish the Vpn Tunnel..."
    exit 1
fi
	echo "Cleaning temporary Files..."
	rm ./tmp/password-${timestamp}.json
	
	# End Script
	exit ${exit_code}
fi
