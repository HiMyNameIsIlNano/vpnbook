#!/bin/sh

vpnbook_folder=$HOME/.vpnbook
vpnbook_base_url=https://www.vpnbook.com
vpnbook_url=${vpnbook_base_url}/freevpn
tesseract_service_url=https://api.ocr.space/parse/image
interactive=1
timestamp=$(date +%s)
exit_code=0

# Start functions  
# Print out the menu
show_menu(){
    NORMAL=`echo "\033[m"`
    MENU=`echo "\033[36m"` #Blue
    NUMBER=`echo "\033[33m"` #yellow
    FGRED=`echo "\033[41m"`
    RED_TEXT=`echo "\033[31m"`
    ENTER_LINE=`echo "\033[33m"`
    echo -e "${MENU}*********************************************${NORMAL}"
    echo -e "${MENU}**${NUMBER} 1)${MENU} Connect to PL226 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 2)${MENU} Connect to DE4 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 3)${MENU} Connect to US1 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 4)${MENU} Connect to US2 ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 5)${MENU} Connect to CA222 ${NORMAL}" 
    echo -e "${MENU}**${NUMBER} 6)${MENU} Connect to FR1 ${NORMAL}"
    echo -e "${MENU}*********************************************${NORMAL}"
    echo -e "${ENTER_LINE}Press ${RED_TEXT}any other key to exit. ${NORMAL}"
}

# Print out the help
usage(){
    echo "usage: vpnbook [[[-s server ] [-i]] | [-h]]"
	echo "server can be {PL226, DE4, US1, US2, CA222, FR1}"
	echo "if no parameter is set the interactive mode is started."
}

zip_downloader(){
	local base_name=VPNBook.com-OpenVPN
	local country=$1 	
	local ext=zip
	local u_country=$(echo $country | tr '[:lower:]' '[:upper:]')

	if [ ! -f ${vpnbook_folder}/${u_country}/${base_name}-${country}.${ext} ]; then
		echo "Downloading" ${base_name}-${country}.${ext}	    	
		curl ${vpnbook_base_url}/free-openvpn-account/${base_name}-${country}.${ext} -o ${vpnbook_folder}/${base_name}-${country}.${ext} 
		# Make the original variable uppercase					
		unzip ${vpnbook_folder}/${base_name}-${country}.${ext} -d ${vpnbook_folder}/${u_country}	
		mv ${vpnbook_folder}/${base_name}-${country}.${ext} ${vpnbook_folder}/${u_country}
	fi
}

is_user_allowed_to_vpn(){
	local group=$(id -G -n $USER | grep -o "vpnstarter")
	if [ "${group}" == "vpnstarter" ]; then
		echo "The user is part of the vpnstarter Group"
	else
		echo "The user is not part of the vpnstarter Group. Please Fix the issue first and then retry."
		exit 1
	fi
}

is_installed(){
	if ! [ -x "$(command -v $1)" ]; then
	  echo 'Error: $1 is not installed.' >&2
	  exit 1
	fi
}

check_requirements(){
	# Check if sudo, curl tesseract, ImageMagick and openvpn are installed
	is_installed sudo
	is_installed curl
	is_installed tesseract
	is_installed mogrify
	is_installed openvpn
	is_user_allowed_to_vpn
}

connect_to() {
	local server=$1
	local l_server=$(echo ${server} | tr '[:upper:]' '[:lower:]')
	
	if [ -f ${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn ]
	then
		echo "Trying to Establish the Vpn Tunnel to ${i}..."
		sudo openvpn --config ${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn --auth-user-pass ${vpnbook_folder}/login.conf > /tmp/vpnbook.log &
		return 0
	else 
		echo "${vpnbook_folder}/${server}/vpnbook-${l_server}-tcp443.ovpn was not found..."
		return 1
	fi
}

connect_to_first_available(){	 
	local server=$1
	local OPENVPN_EXIT_STATUS
	
	if [ "${server}" != "" ]
	then
		# Make the original variable lowercase
		local l_server=$(echo ${server} | tr '[:upper:]' '[:lower:]')	
		
		echo "Trying to Establish the Vpn Tunnel to ${server}..."
		connect_to ${server}
		OPENVPN_EXIT_STATUS=$?
		
		if [ ${OPENVPN_EXIT_STATUS} -eq 0  ]; then
			echo "Vpn Tunnel established"
			return  0
		else
			echo "Trying to connect to another server..."
			# If the connection was unsuccesful, then try to connect to the first available Server
			for i in PL226 DE4 US1 US2 CA222 FR1
			do
				# Just skip a reconnection to the same Server given as input
				if [ "${i}" != "${server}" ]
				then
					connect_to ${i}
					OPENVPN_EXIT_STATUS=$?
					if [ ${OPENVPN_EXIT_STATUS} -eq 0  ]; then
						return 0
					fi
				fi
			done
		fi
		return 1
	else 
		echo "Method called with an empty input parameter..."
		return 1
	fi
}
# End functions 

# Start Script
while [ "$1" != "" ]; do
    case $1 in
        -s | --server )         shift
                                server=$1
                                interactive=0
                                ;;
        -i | --interactive )    interactive=1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

check_requirements

# Retrieve the Password URL from the official webpage
#pwd_url=$(curl -s ${vpnbook_url} | grep Password | tr -d ' ' | sed -n '2p' | cut -d \" -f2 | sed 's/bg.*\&//')
pwd_url=$(curl -s ${vpnbook_url} | grep Password | tr ' ' '%' | sed -n '2p' | cut -d \" -f2 | sed 's/bg.*\&//') | tr '%' ' ') 
echo "Retrieving Password at the following URL: ${vpnbook_url}/${pwd_url}"

curl -X POST --header "apikey: 5a64d478-9c89-43d8-88e3-c65de9999580" \
-F 'url="${vpnbook_base_url}/${pwd_url}"' \
-F 'language=eng' \
-F 'isOverlayRequired=true' \
-F 'FileType=.Auto' \
-F 'IsCreateSearchablePDF=false' \
-F 'isSearchablePdfHideTextLayer=true' \
-F 'scale=true' \
-F 'detectOrientation=false' \
-F 'isTable=false' \
${tesseract_service_url} -o /tmp/password-${timestamp}.json

pwd_with_quotes=$(cat /tmp/password-${timestamp}.json | grep -o '"WordText":.*?[^\\]",'| awk -F':' '{print $2}' | tr -d '[:space:]')
pwd="${pwd_with_quotes#\"}"

echo ${pwd}
exit 0

pwd=$(cat /tmp/password-${timestamp}.txt | tr -d '[:space:]')

if [ "${pwd}" == "" ] 
then
	echo "Password not retrieved from server..."
	echo "Exiting"
	exit 1
else
	mkdir -p ${vpnbook_folder} 	
	
	for i in PL226 DE4 US1 US2 CA222 FR1
	do
		zip_downloader ${i}
	done
	 	
	echo "Password retrieved from server: " ${pwd}
	# Check if the file with Username and Password exists, if so, delete it.
	if [ -f ${vpnbook_folder}/login.conf ]
	then
		rm ${vpnbook_folder}/login.conf
	fi

	# Create a new file to store the Username and Password
	echo "vpnbook" >> ${vpnbook_folder}/login.conf
	echo $pwd >> ${vpnbook_folder}/login.conf

	# Test code to verify command line processing
	if [ ${interactive} = "1" ]; then
		show_menu
		read opt
		
		case $opt in
		1) var=PL226;;
		2) var=DE4;;
		3) var=US1;;
		4) var=US2;;
		5) var=CA222;;
		6) var=FR1;;
		*) echo "Exit"; exit;;
		esac
	else
		var=${server}
	fi

	echo "Starting the Vpn Tunnel"
	# Login to sudo	
	sudo -v
	
	# Start the connection and if whatever error occurs, then connect to the first available server
	connect_to_first_available ${var}
	OPENVPN_EXIT_STATUS=$?
	
	if [ ${OPENVPN_EXIT_STATUS} -eq 0  ]; then
		echo "Vpn Tunnel established"
	else
		echo "An Error has occurred while trying to Establish the Vpn Tunnel"
		exit_code=1
	fi

	echo "Cleaning temporary Files..."
	rm /tmp/password-${timestamp}.php /tmp/password-${timestamp}.png /tmp/password-${timestamp}.txt
	
	# End Script
	exit ${exit_code}
fi
